converted lexicon from nst format.
function words marked with f, content words with c.

sh ~/openmary_git_readwrite/marytts/target/marytts-builder-5.0-SNAPSHOT/bin/transcription.sh

changed line from
java -showversion -ea $* -cp "$MARY_BASE/lib/*" marytts.tools.transcription.TranscriptionGUI
to 
java -showversion -ea -cp "$MARY_BASE/lib/*" marytts.tools.transcription.TranscriptionGUI $*


calls:
~/openmary_git_readwrite/marytts/marytts-transcription/src/main/java/marytts/tools/transcription/TranscriptionGUI.java


~/openmary_git_readwrite/marytts/marytts-lang-da/src/main/resources/marytts/language/da>sh ~/openmary_git_readwrite/marytts/target/marytts-builder-5.0-SNAPSHOT/bin/transcription.sh lexicon/
open allophones file
open lexicon file

* All transcriptions are red
checkAllophoneSyntax defined in marytts-common/src/main/java/marytts/modules/phonemiser/AllophoneSet.java
calls splitIntoAllophoneList, which throws exception if illegal symbol, checkAllophoneSyntax discards message and returns false.
Added printout l403 AllophoneSet.java

* mvn package
* then transcription.sh needs to be edited again

Ok, can load allophones.dk.xml and dan_lex_mini.txt/dan_lex_converted_filtered_utf8.txt
Cannot run train and predict:

java.lang.RuntimeException: couldn't train decisiontree using weka: weka.core.UnsupportedAttributeTypeException: weka.classifiers.trees.j48.C45PruneableClassifierTree: Cannot handle unary class!
	at marytts.tools.newlanguage.LTSTrainer.trainTree(LTSTrainer.java:231)

Something is a unary class? (Only one alternative) But what? And why does it fail?
There is a logger.debug line, where is the log? How to set debug level?
-Dlog4j.logger.marytts=DEBUG,stderr 
doesn't seem to do anything
Adding normal printout after logger.debug line 

Last output:
Training decision tree for: c

Added a 'dummy' classification in LTSTrainer.java l207 to avoid unary class, this seems to work.
Now got out of memory error. Added -Xmx1024M in transcription.sh, seems to work, at least it failed on e before, now passes that point.
No. Now I get 'unary class' error on '3'. There shouldn't be a 3.. remove cm3 and m3 from lexicon.. also cm2, m2, km2.. now trainpredict works

OK.
open lexicon.
save (will create an fst file)
tick function words
trainpredict (will create lts and pos.fst if some words are ticked)
TODO: tick words automatically based on c/f in lex file

save doesn't work with the full file:
java.io.IOException: Cannot write transducer: too many arc-labels to be encoded in binary fst format (would need 12 bits, have 11)
	at marytts.fst.TransducerTrie.writeFST(TransducerTrie.java:91)
	at marytts.tools.transcription.TranscriptionTableModel.createLexicon(TranscriptionTableModel.java:486)
	at marytts.tools.transcription.TranscriptionTable.saveTranscription(TranscriptionTable.java:253)

edited l57 in TransducerTrie.java to increase bit size..

java.io.IOException: Cannot handle non-standard bit allocation for label and arc id's.
	at marytts.fst.FST.load(FST.java:157)
	at marytts.fst.FST.<init>(FST.java:66)
	at marytts.fst.FSTLookup.init(FSTLookup.java:81)
	at marytts.fst.FSTLookup.<init>(FSTLookup.java:61)

Changed in FST.java from 32 to 64

java.io.IOException: Cannot write transducer: too many arc-labels to be encoded in binary fst format (would need 12 bits, have 43)
	at marytts.fst.TransducerTrie.writeFST(TransducerTrie.java:93)
	at marytts.tools.transcription.TranscriptionTableModel.createLexicon(TranscriptionTableModel.java:486)

the shift result is 1 in this case... changed from 64 to 63 --- all this is just random.. no, now it's 2, changing to 65 (last random try!)

Ok, this seems to work, except testing fails on a large number of words..

Now try to compile language files..

Ok, everything seems to work, but then when running the server it doesn't, 

http://localhost:59125/process?INPUT_TEXT=Hello+world&INPUT_TYPE=TEXT&OUTPUT_TYPE=PHONEMES&LOCALE=da

gives

Internal server error

Processing failed.

java.lang.UnsupportedOperationException: No known way of generating output from input -- no processing path through modules.
	at marytts.server.Request.processOneChunk(Request.java:508)
	at marytts.server.Request.processOrLookupOneChunk(Request.java:389)
	at marytts.server.Request.process(Request.java:336)
	at marytts.server.http.SynthesisRequestHandler.process(SynthesisRequestHandler.java:272)
	at marytts.server.http.SynthesisRequestHandler.handleClientRequest(SynthesisRequestHandler.java:98)
	at marytts.server.http.BaseHttpRequestHandler.handle(BaseHttpRequestHandler.java:144)
	at org.apache.http.nio.protocol.BufferingHttpServiceHandler$RequestHandlerAdaptor.handle(BufferingHttpServiceHandler.java:189)
	at org.apache.http.nio.protocol.SimpleNHttpRequestHandler.handle(SimpleNHttpRequestHandler.java:51)
	at org.apache.http.nio.protocol.AsyncNHttpServiceHandler.processRequest(AsyncNHttpServiceHandler.java:453)
	at org.apache.http.nio.protocol.AsyncNHttpServiceHandler.requestReceived(AsyncNHttpServiceHandler.java:225)
	at org.apache.http.nio.protocol.BufferingHttpServiceHandler.requestReceived(BufferingHttpServiceHandler.java:127)
	at org.apache.http.impl.nio.DefaultNHttpServerConnection.consumeInput(DefaultNHttpServerConnection.java:161)
	at org.apache.http.impl.nio.DefaultServerIOEventDispatch.inputReady(DefaultServerIOEventDispatch.java:147)
	at org.apache.http.impl.nio.reactor.BaseIOReactor.readable(BaseIOReactor.java:161)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvent(AbstractIOReactor.java:335)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvents(AbstractIOReactor.java:315)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.execute(AbstractIOReactor.java:275)
	at org.apache.http.impl.nio.reactor.BaseIOReactor.execute(BaseIOReactor.java:104)
	at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor$Worker.run(AbstractMultiworkerIOReactor.java:542)
	at java.lang.Thread.run(Thread.java:662)


Hm. I had this at some point with the swedish files too. Stopping here for today.

Is it enough to copy the jar file? How is that done otherwise (pom.xml in marytts not enough, apparently - somthing to do with marytts-runtime, wasn't it??)

sh target/marytts-5.0-SNAPSHOT/bin/marytts-server.sh -Dlog4j.logger.marytts=DEBUG,stderr

da seems to work up to PARTSOFSPEECH

so testing the phonemiser:

sh target/marytts-5.0-SNAPSHOT/bin/fst_lookup.sh marytts-lang-da/src/main/resources/marytts/language/da/lexicon/da_lexicon.fst hej
java version "1.6.0_26"
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) Server VM (build 20.1-b02, mixed mode)

---- 1 result(s) for hej:
" h A j

processed in 185 ms.

didn't test the lts.

Checked the server.log:

sh target/marytts-5.0-SNAPSHOT/bin/marytts-server.sh -Dlog4j.logger.marytts=DEBUG,stderr &> server.log
grep JPhonemiser server.log

"Module started (PARTSOFSPEECH->PHONEMES, locale sv)" occured twice, da not at all
checked da.config, OK, checked allophones.da.xml AHA lang=sv changed to da, mvn package, copy jar file, restart, WORKS

copied wav files 1-999
makeTextFiles
voiceimport

* EHMM

( cd /home/harald/openmary_stuff/spraakbanken/nst_da_train_1000/ehmm; /home/harald/ehmm//bin/ehmm /home/harald/openmary_stuff/spraakbanken/nst_da_train_1000/ehmm/etc/ehmm.phoneList.int /home/harald/openmary_stuff/spraakbanken/nst_da_train_1000/ehmm/etc/ehmm.align.int 1 0 /home/harald/openmary_stuff/spraakbanken/nst_da_train_1000/ehmm/feat ft /home/harald/openmary_stuff/spraakbanken/nst_da_train_1000/ehmm/mod 0 0 0 >> log.txt; exit )

java.lang.Exception: The component EHMMLabeler produced the following exception: 
	at marytts.tools.voiceimport.DatabaseImportMain$8.run(DatabaseImportMain.java:297)
Caused by: marytts.exceptions.MaryConfigurationException: baumWelchEHMM computation failed.
Error: null
	at marytts.tools.voiceimport.EHMMLabeler.baumWelchEHMM(EHMMLabeler.java:537)
	at marytts.tools.voiceimport.EHMMLabeler.compute(EHMMLabeler.java:186)
	at marytts.tools.voiceimport.DatabaseImportMain$8.run(DatabaseImportMain.java:294)

retrain_flag var satt till false, verkar som den måste vara true?
Borde ju vara så också
